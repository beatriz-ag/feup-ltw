```/**      (C)2000-2021 FEUP
 *       tidy up some includes and parameters
 * */

#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>

#include <string.h>

#define SERVER_PORT 21
// #define SERVER_ADDR "192.168.28.96"

int receiveResponse(int fd) {
    char buf[256];
    int res;
    int i=0;
    char code[4];
    int end = 1;
    
    while(end) {
        for(int j = 0; j < 4; j++) {
            res = read(fd, &code[j], 1);
        }
        end = code[3] == '-';
        i=0;
        do {
            res = read(fd, &buf[i++], 1);
            if (res < 0) return 0;
        } while(buf[i - 1] != '\n');

    }
    
    return atoi(code);
}

int client(char * server_address, char * user, char * password) {
    int sockfd;
    struct sockaddr_in server_addr;
    char buf[] = "Mensagem de teste na travessia da pilha TCP/IP\n";
    size_t bytes;

    /*server address handling*/
    bzero((char *) &server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr(server_address);    /*32 bit Internet address network byte ordered*/
    server_addr.sin_port = htons(SERVER_PORT);                  /*server TCP port must be network byte ordered */

    /*open a TCP socket*/
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket()");
        return -1;
    }
    /*connect to the server*/
    if (connect(sockfd,
                (struct sockaddr *) &server_addr,
                sizeof(server_addr)) < 0) {
        perror("connect()");
        return -1;
    }

    /*receive welcome msg*/
    int ret = receiveResponse(sockfd);
    printf("ret: %d\n", ret);
    if(ret != 220) {
        printf("Bad server");
        close(sockfd);
        return -1;
    }

    /*send username*/
    int length = 6 + strlen(user);
    char * message = (char *)malloc(length);
    snprintf(message, length, "user %s", user);
    message[length-1]='\n';
    printf("%s\n", message);
    bytes = write(sockfd, message, length);
    if(bytes<1){
        free(message);
        close(sockfd);
        perror("Login - user");
        return -1;
    }
    /*receive response*/
    ret = receiveResponse(sockfd);
    if(ret != 331) {
        printf("Bad request\n");
        free(message);
        close(sockfd);
        return -1;
    }
    printf("User ret = %d\n", ret);
    
    /*send password*/
    length = 6 + strlen(password);
    message = (char *)realloc(message, length);
    snprintf(message, length, "pass %s", password);
    message[length-1]='\n';
    printf("%s\n", message);
    bytes = write(sockfd, message, length);
    if(bytes<1){
        free(message);
        close(sockfd);
        perror("Login - password");
        return -1;
    }
    /*receive response*/
    ret = receiveResponse(sockfd);
    printf("Password ret = %d\n", ret);
    if(ret != 230) {
        printf("Bad login\n");
        free(message);
        close(sockfd);
        return -1;
    }


    /*send a string to the server*/
    bytes = write(sockfd, buf, strlen(buf));
    if (bytes > 0)
        printf("Bytes escritos %ld\n", bytes);
    else {
        perror("write()");
        exit(-1);
    }

    if (close(sockfd)<0) {
        perror("close()");
        exit(-1);
    }
    return 0;
}

```